# Cache configuration
proxy_cache_path /var/cache/nginx/dicom_cache levels=1:2 keys_zone=dicom_cache:10m max_size=10g inactive=60m;

server {
    listen 443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;
    server_name {dicomwebdomain};

    access_log /var/log/nginx/orthanc-http-access.log;
    error_log /var/log/nginx/orthanc-http-error.log;

    ssl_certificate {certificate_path};
    ssl_certificate_key {certificate_key_path};

    include /etc/nginx/default.d/*.conf;
    
    # Set maximum upload size to 1GB
    client_max_body_size 1G;

    # # Cache key format
    proxy_cache_key "$scheme$request_method$host$request_uri";

    # -------------------------------------------
    # CACHE VALIDITY FOR DIFFERENT RESPONSE CODES
    # -------------------------------------------
    # Cache valid for these response codes for 1 hour
    proxy_cache_valid 200 301 302 304 1h;
    # Cache valid for any other response for 1 minute
    proxy_cache_valid any 1m;

    # --------------------
    # STALE CACHE HANDLING
    # --------------------
    # Use stale cache if certain errors occur
    proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;

    location / {
        if ($request_method = 'OPTIONS') {
            return 204;
        }
        proxy_pass http://127.0.0.1:8042/dicom-web;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_ssl_server_name on;
        
        # --------------
        # CACHE CONTROL
        # --------------
        # Use the dicom_cache defined above
        proxy_cache dicom_cache;
        # Enable cache locking to prevent simultaneous updates
        proxy_cache_lock on;
        # Timeout for cache locks
        proxy_cache_lock_timeout 5s;
        # Perform cache updates in the background
        proxy_cache_background_update on;
        # Revalidate cached responses with the origin server
        proxy_cache_revalidate on;
        # Add header indicating cache status
        add_header X-Cached $upstream_cache_status;

        add_header Access-Control-Allow-Origin '*' always;
        add_header Access-Control-Allow-Credentials 'true' always;
        add_header Access-Control-Allow-Headers 'Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range' always;
        add_header Access-Control-Allow-Methods 'GET,POST,OPTIONS,PUT,DELETE,PATCH' always;
        add_header Access-Control-Max-Age 1728000 always;
        add_header Cross-Origin-Opener-Policy 'same-origin' always;
        add_header Cross-Origin-Embedder-Policy 'require-corp' always;
        add_header Cross-Origin-Resource-Policy 'cross-origin' always;
    }
}

server {
    listen 80;
    listen [::]:80;
    server_name {dicomwebdomain};
    location / {
        # Redirect HTTP to HTTPS
        return 301 https://$host$request_uri;
    }
}
